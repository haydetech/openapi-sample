openapi: 3.0.3
info:
  title: E-commerce API
  description: |
    A comprehensive API for managing an e-commerce platform including users, products, orders, and categories.
    This API follows a flexible approach where each entity has a single model, and the required fields are specified for each operation.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
    url: https://www.example.com/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

tags:
  - name: authentication
    description: Authentication operations
  - name: users
    description: User management
  - name: products
    description: Product catalog operations
  - name: orders
    description: Order management
  - name: categories
    description: Product category operations

paths:
  /auth/token:
    post:
      summary: Obtain an access token
      tags:
        - authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users:
    get:
      summary: List all users
      description: Retrieves a list of users. Use query parameters to filter and paginate the results.
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: role
          in: query
          description: Filter users by role
          schema:
            type: string
            enum: [admin, customer, staff]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedList'
      security:
        - BearerAuth: []
    post:
      summary: Create a new user
      description: |
        Creates a new user. The following fields are required:
        - username
        - email
        - password
        - role
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
      security:
        - BearerAuth: []

  /users/{userId}:
    get:
      summary: Get user by ID
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    put:
      summary: Update a user
      description: |
        Updates an existing user. All fields are optional. Only provided fields will be updated.
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    delete:
      summary: Delete a user
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []

  /products:
    get:
      summary: List all products
      description: Retrieves a list of products. Use query parameters to filter and paginate the results.
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: category
          in: query
          description: Filter products by category
          schema:
            type: string
        - name: min_price
          in: query
          description: Minimum price filter
          schema:
            type: number
            format: float
        - name: max_price
          in: query
          description: Maximum price filter
          schema:
            type: number
            format: float
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedList'
    post:
      summary: Create a new product
      description: |
        Creates a new product. The following fields are required:
        - name
        - price
        - category_id
      tags:
        - products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestError'
      security:
        - BearerAuth: []

  /products/{productId}:
    get:
      summary: Get product by ID
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a product
      description: |
        Updates an existing product. All fields are optional. Only provided fields will be updated.
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    delete:
      summary: Delete a product
      tags:
        - products
      parameters:
        - $ref: '#/components/parameters/ProductIdParam'
      responses:
        '204':
          description: Product deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []

  /orders:
    get:
      summary: List all orders
      description: Retrieves a list of orders. Use query parameters to filter and paginate the results.
      tags:
        - orders
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          description: Filter orders by status
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
        - name: from_date
          in: query
          description: Filter orders from this date (inclusive)
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          description: Filter orders to this date (inclusive)
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedList'
      security:
        - BearerAuth: []
    post:
      summary: Create a new order
      description: |
        Creates a new order. The following fields are required:
        - user_id
        - items (array of objects with product_id and quantity)
      tags:
        - orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequestError'
      security:
        - BearerAuth: []

  /orders/{orderId}:
    get:
      summary: Get order by ID
      tags:
        - orders
      parameters:
        - $ref: '#/components/parameters/OrderIdParam'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []
    put:
      summary: Update an order
      description: |
        Updates an existing order. Typically used to update the order status.
        Only the status field can be updated after order creation.
      tags:
        - orders
      parameters:
        - $ref: '#/components/parameters/OrderIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      security:
        - BearerAuth: []

  /categories:
    get:
      summary: List all categories
      tags:
        - categories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      description: |
        Creates a new category. The following field is required:
        - name
      tags:
        - categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequestError'
      security:
        - BearerAuth: []

components:
  schemas:
    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds

    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          writeOnly: true
        role:
          type: string
          enum: [admin, customer, staff]
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    Product:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        category_id:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true

    Order:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        user_id:
          type: string
        total:
          type: number
          format: float
          readOnly: true
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
              quantity:
                type: integer
              price:
                type: number
                format: float
                readOnly: true

    Category:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string

    PaginatedList:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/User'
              - $ref: '#/components/schemas/Product'
              - $ref: '#/components/schemas/Order'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message

  parameters:
    UserIdParam:
      name: userId
      in: path
      required: true
      schema:
        type: string
    ProductIdParam:
      name: productId
      in: path
      required: true
      schema:
        type: string
    OrderIdParam:
      name: orderId
      in: path
      required: true
      schema:
        type: string
    LimitParam:
      name: limit
      in: query
      description: Number of items to return
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    OffsetParam:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        default: 0
        minimum: 0

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequestError:
      description: The request was invalid or cannot be served. An accompanying error message will explain the reason.
      content:
        application/json:
          schema:
            $ref: '#
