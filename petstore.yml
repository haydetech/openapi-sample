openapi: 3.0.0
info:
  title: Sample API
  description: This is a sample API to demonstrate OpenAPI specifications
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Main (production) server
  - url: https://staging-api.example.com/v1
    description: Staging server

paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - Pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
      security:
        - bearerAuth: []
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - Pets
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
          multipart/form-data:
            schema:
              type: object
              properties:
                pet:
                  $ref: '#/components/schemas/NewPet'
                photo:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created
        '400':
          description: Invalid input
      security:
        - bearerAuth: []

  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
      security:
        - bearerAuth: []
    patch:
      summary: Update a pet's information
      operationId: updatePet
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Pet object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - bearerAuth: []
    put:
      summary: Update a pet
      operationId: updatePetById
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Pet object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: Pet updated
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - bearerAuth: []
    delete:
      summary: Delete a pet
      operationId: deletePet
      tags:
        - Pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - bearerAuth: []

  /owners:
    get:
      summary: List all owners
      operationId: listOwners
      tags:
        - Owners
      responses:
        '200':
          description: A paged array of owners
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owners'
      security:
        - bearerAuth: []
    post:
      summary: Create an owner
      operationId: createOwner
      tags:
        - Owners
      requestBody:
        description: Owner to add to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOwner'
      responses:
        '201':
          description: Created
        '400':
          description: Invalid input
      security:
        - bearerAuth: []

  /owners/{ownerId}:
    get:
      summary: Info for a specific owner
      operationId: showOwnerById
      tags:
        - Owners
      parameters:
        - name: ownerId
          in: path
          required: true
          description: The id of the owner to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '404':
          description: Owner not found
      security:
        - bearerAuth: []
    patch:
      summary: Update an owner's information
      operationId: updateOwner
      tags:
        - Owners
      parameters:
        - name: ownerId
          in: path
          required: true
          description: The id of the owner to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Owner object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '200':
          description: Owner updated
        '400':
          description: Invalid ID supplied
        '404':
          description: Owner not found
      security:
        - bearerAuth: []
    delete:
      summary: Delete an owner
      operationId: deleteOwner
      tags:
        - Owners
      parameters:
        - name: ownerId
          in: path
          required: true
          description: The id of the owner to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Owner deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Owner not found
      security:
        - bearerAuth: []

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
      example:
        id: 1
        name: "Doggie"
        tag: "Dog"

    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string
      example:
        name: "Doggie"
        tag: "Dog"

    Pets:
      type: array
      items:
        $ref: '#/components/schemas/Pet'

    Owner:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      example:
        id: 1
        name: "John Doe"

    NewOwner:
      type: object
      required:
        - name
      properties:
        name:
          type: string
      example:
        name: "John Doe"

    Owners:
      type: array
      items:
        $ref: '#/components/schemas/Owner'

securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT

tags:
  - name: Pets
    description: Everything about your Pets
  - name: Owners
    description: Operations about owners

externalDocs:
  description: Find out more about our API
  url: https://example.com
